import tkinter as tk
from tkinter import messagebox

class PersonalityQuizApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Personality Quiz")
        
        self.user_name = ""
        self.current_question = None
        
        # Initialize GUI
        self.initialize_gui()
    
    def initialize_gui(self):
        self.root.configure(bg='#f0f0f0')  # Set background color
        self.start_screen()
    
    def start_screen(self):
        self.clear_screen()
        
        tk.Label(self.root, text="Welcome to the Personality Quiz!", font=("Arial", 16), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Label(self.root, text="What is your nickname?", bg='#f0f0f0', fg='#34495e').pack(pady=5)
        self.nickname_entry = tk.Entry(self.root, bg='#ffffff', fg='#2c3e50')
        self.nickname_entry.pack(pady=5)
        
        tk.Button(self.root, text="Start Quiz", command=self.start_quiz, bg='#3498db', fg='#ffffff').pack(pady=20)
    
    def start_quiz(self):
        self.user_name = self.nickname_entry.get()
        if not self.user_name:
            messagebox.showwarning("Warning", "Please enter a nickname!")
            return
        
        self.current_question = 'color'
        self.ask_question()
    
    def ask_question(self):
        self.clear_screen()
        
        if self.current_question == 'color':
            self.ask_color_question()
        elif self.current_question == 'room':
            self.ask_room_question()
        elif self.current_question == 'skySea':
            self.ask_sky_sea_question()
        elif self.current_question == 'sunsets':
            self.ask_sunsets_question()
        elif self.current_question == 'adventure':
            self.ask_adventure_question()
        elif self.current_question == 'hobbies':
            self.ask_hobbies_question()
        elif self.current_question == 'books':
            self.ask_books_question()
        elif self.current_question == 'travel':
            self.ask_travel_question()
    
    def ask_color_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you prefer the color blue or red?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Blue (B)", command=lambda: self.handle_answer('B'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Red (R)", command=lambda: self.handle_answer('R'), bg='#e74c3c', fg='#ffffff').pack(pady=5)
    
    def ask_room_question(self):
        tk.Label(self.root, text=f"{self.user_name}, is your room brightly colored or very neat?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Colored (C)", command=lambda: self.handle_answer('C'), bg='#e67e22', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Neat (N)", command=lambda: self.handle_answer('N'), bg='#2ecc71', fg='#ffffff').pack(pady=5)
    
    def ask_sky_sea_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you prefer blue sky or blue sea?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Sky (SKY)", command=lambda: self.handle_answer('SKY'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Sea (SEA)", command=lambda: self.handle_answer('SEA'), bg='#1abc9c', fg='#ffffff').pack(pady=5)
    
    def ask_sunsets_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you like watching sunsets with people you love?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Yes (Y)", command=lambda: self.handle_answer('Y'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="No (N)", command=lambda: self.handle_answer('N'), bg='#e74c3c', fg='#ffffff').pack(pady=5)
    
    def ask_adventure_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you think you are an adventurer?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Yes (Y)", command=lambda: self.handle_answer('Y'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="No (N)", command=lambda: self.handle_answer('N'), bg='#e74c3c', fg='#ffffff').pack(pady=5)
    
    def ask_hobbies_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you enjoy outdoor activities or indoor hobbies?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Outdoor (O)", command=lambda: self.handle_answer('O'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Indoor (I)", command=lambda: self.handle_answer('I'), bg='#e74c3c', fg='#ffffff').pack(pady=5)

    def ask_books_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you prefer fiction or non-fiction books?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Fiction (F)", command=lambda: self.handle_answer('F'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Non-Fiction (NF)", command=lambda: self.handle_answer('NF'), bg='#e74c3c', fg='#ffffff').pack(pady=5)
    
    def ask_travel_question(self):
        tk.Label(self.root, text=f"{self.user_name}, do you prefer traveling to new places or relaxing at home?", font=("Arial", 14), bg='#f0f0f0', fg='#2c3e50').pack(pady=10)
        
        tk.Button(self.root, text="Travel (T)", command=lambda: self.handle_answer('T'), bg='#3498db', fg='#ffffff').pack(pady=5)
        tk.Button(self.root, text="Home (H)", command=lambda: self.handle_answer('H'), bg='#e74c3c', fg='#ffffff').pack(pady=5)
    
    def handle_answer(self, answer):
        if self.current_question == 'color':
            if answer == 'R':
                self.current_question = 'room'
            elif answer == 'B':
                self.current_question = 'skySea'
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
        elif self.current_question == 'room':
            if answer == 'C':
                self.current_question = 'adventure'
            elif answer == 'N':
                self.current_question = 'sunsets'
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
        elif self.current_question == 'skySea':
            if answer == 'SKY':
                self.current_question = 'adventure'
            elif answer == 'SEA':
                messagebox.showinfo("Result", "You are a calm person who thinks before doing things and understands things very well.")
                self.start_screen()
                return
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
        elif self.current_question == 'sunsets':
            if answer == 'Y':
                messagebox.showinfo("Result", "You are a person overflowing with creativity and you observe things very closely.")
                self.start_screen()
                return
            elif answer == 'N':
                self.current_question = 'adventure'
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
        elif self.current_question == 'adventure':
            if answer == 'Y':
                messagebox.showinfo("Result", "You are a person overflowing with creativity and you observe things very closely.")
            elif answer == 'N':
                messagebox.showinfo("Result", "You are a calm person who thinks before doing things and understands things very well.")
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
            self.start_screen()
            return
        elif self.current_question == 'hobbies':
            if answer == 'O':
                self.current_question = 'books'
            elif answer == 'I':
                self.current_question = 'travel'
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
        elif self.current_question == 'books':
            if answer == 'F':
                messagebox.showinfo("Result", "You enjoy immersing yourself in imaginative worlds and stories.")
            elif answer == 'NF':
                messagebox.showinfo("Result", "You value learning and gaining knowledge from real-world experiences.")
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
            self.start_screen()
            return
        elif self.current_question == 'travel':
            if answer == 'T':
                messagebox.showinfo("Result", "You love exploring new places and experiencing new cultures.")
            elif answer == 'H':
                messagebox.showinfo("Result", "You find comfort and joy in your familiar surroundings.")
            else:
                messagebox.showwarning("Invalid Answer", "Please choose a valid answer.")
                return
            self.start_screen()
            return

        self.ask_question()
    
    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = PersonalityQuizApp(root)
    root.mainloop()
